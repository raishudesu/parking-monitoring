generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi", "postgresqlExtensions"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum AdminRole {
  ADMIN
  SUPERADMIN
  SECURITY
}

enum UserRole {
  GPO
  VISITOR
}

enum AdminAction {
  CREATE
  INSERT
  UPDATE
  DELETE
  REACTIVATE
  DEACTIVATE
}

enum Tables {
  ADMIN
  ACCOUNT
  VISITORPASSCARD
  PARKINGSPACE
  COLLEGE
  USERFEEDBACK
  REPORTGENERATIONLOG
  USERSURVEY
  DRIVERBEHAVIORREPORT
}

enum ParkingSpaceType {
  MOTORCYCLE
  TRICYCLE
  FOURWHEEL
  MIXED
  PWD
  VIP
}

enum AccountType {
  FACULTY
  STUDENT
  STAFF
}

enum SessionStatus {
  ONGOING
  ENDED
}

model GPOAccount {
  id             String                 @id @default(uuid())
  gatePassNumber String                 @unique
  email          String?                @unique
  password       String
  accountType    AccountType
  collegeName    College?               @relation(fields: [collegeId], references: [id])
  collegeId      String?
  department     String?
  isVIP          Boolean                @default(false)
  isPWD          Boolean                @default(false)
  imageLink      String?
  gpoSessions    GPOSession[]
  violations     GPOViolation[]
  role           UserRole               @default(GPO)
  creditScore    Int?                   @default(100)
  feedbacks      UserFeedback[]
  isActive       Boolean                @default(true)
  createdAt      DateTime               @default(now())
  updatedAt      DateTime               @updatedAt
  surveys        UserSurvey[]
  reports        DriverBehaviorReport[]
}

model GPOSession {
  id             String        @id @default(uuid())
  parkingSpace   ParkingSpace  @relation(fields: [parkingSpaceId], references: [id], onDelete: Cascade)
  parkingSpaceId String
  accountParked  GPOAccount    @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId      String
  startTime      DateTime      @default(now())
  shouldEndAt    DateTime?
  endTime        DateTime?
  status         SessionStatus @default(ONGOING)
  endedProperly  Boolean?
}

model GPOViolation {
  id                String     @id @default(uuid())
  accountViolator   GPOAccount @relation(fields: [accountViolatorId], references: [id], onDelete: Cascade)
  accountViolatorId String
  violationDate     DateTime   @default(now())
  violationType     String
  pointsDeducted    Int
}

model VisitorPassCard {
  id         String           @id @default(uuid())
  cardNumber Int              @unique
  createdAt  DateTime         @default(now())
  sessions   VisitorSession[]
}

model VisitorSession {
  id              String          @id @default(uuid())
  visitTime       DateTime        @default(now())
  exitTime        DateTime?
  visitorPassId   String
  status          SessionStatus   @default(ONGOING)
  visitorPassCard VisitorPassCard @relation(fields: [visitorPassId], references: [id])
}

model ParkingSpace {
  id                   String                 @id @default(uuid())
  name                 String
  description          String
  longitude            String?
  latitude             String?
  spaceType            ParkingSpaceType       @default(MIXED)
  currCapacity         Int?                   @default(0)
  maxCapacity          Int
  currReservedCapacity Int?                   @default(0)
  reservedCapacity     Int                    @default(1)
  gpoSessions          GPOSession[]
  images               ParkingSpaceImage[]
  addedAt              DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  polygon              String?
  isActive             Boolean                @default(true)
  relatedReports       DriverBehaviorReport[]
}

model ParkingSpaceImage {
  id             String       @id @default(uuid())
  url            String
  path           String
  parkingSpaceId String
  parkingSpace   ParkingSpace @relation(fields: [parkingSpaceId], references: [id], onDelete: Cascade)
  uploadedAt     DateTime     @default(now())
}

model Admin {
  id                   String                 @id @default(uuid())
  firstName            String
  lastName             String
  corpEmail            String                 @unique
  password             String
  isActive             Boolean                @default(true)
  role                 AdminRole              @default(ADMIN)
  logs                 AdminLog[]
  reportGenerationLogs ReportGenerationLog[]
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  resolvedReports      DriverBehaviorReport[]
}

model AdminLog {
  id        String      @id @default(uuid())
  action    AdminAction
  table     Tables
  admin     Admin       @relation(fields: [adminId], references: [id])
  adminId   String
  createdAt DateTime    @default(now())
}

model ReportGenerationLog {
  id                 String   @id @default(uuid())
  generatedBy        Admin    @relation(fields: [generatedByAdminId], references: [id])
  generatedByAdminId String
  reportDescription  String
  generatedAt        DateTime @default(now())
}

model College {
  id          String       @id @default(uuid())
  collegeName String
  accounts    GPOAccount[]
}

model UserFeedback {
  id          String      @id @default(uuid())
  name        String
  email       String
  message     String
  userGpo     GPOAccount? @relation(fields: [userGpoId], references: [id])
  userGpoId   String?
  submittedAt DateTime    @default(now())
}

model UserSurvey {
  id                   String     @id @default(uuid())
  overallExperience    Int
  easeOfUse            String
  realtimeFeatures     String
  qrFunctionality      String
  notificationFeedback String
  suggestions          String
  likelyToRecommend    String
  user                 GPOAccount @relation(fields: [userId], references: [id])
  userId               String
}

enum ReportStatus {
  PENDING
  RESOLVED
  DISMISSED
}

enum ReportType {
  UNAUTHORIZED_PARKING // Parking in spaces like PWD, VIP, or reserved areas without authorization
  BLOCKING_OTHER_VEHICLES // Parking in a way that blocks other vehicles
  PROLONGED_PARKING // Exceeding the allowed parking time
  RECKLESS_DRIVING // Driving recklessly in the parking area
  OTHER // Any other behavior not listed above
}

model DriverBehaviorReport {
  id                  String                       @id @default(cuid())
  reportedByAccount   GPOAccount                   @relation(fields: [reportedByAccountId], references: [id])
  reportedByAccountId String // ID of the user who submitted the report
  parkingSpace        ParkingSpace?                @relation(fields: [parkingSpaceId], references: [id])
  parkingSpaceId      String? // Optional: Link to the parking space
  reportType          ReportType // Type of behavior (e.g., unauthorized parking)
  otherDescription    String? // Details of the behavior
  createdAt           DateTime                     @default(now())
  resolvedAt          DateTime? // Optional: Timestamp when resolved
  resolvedByAdmin     Admin?                       @relation(fields: [resolvedByAdminId], references: [id])
  resolvedByAdminId   String? // Optional: Admin resolving the report
  status              ReportStatus                 @default(PENDING) // Pending, Resolved, Dismissed
  images              DriverBehaviorReportImages[]
}

model DriverBehaviorReportImages {
  id         String               @id @default(cuid())
  url        String
  path       String
  report     DriverBehaviorReport @relation(fields: [reportId], references: [id])
  reportId   String
  uploadedAt DateTime             @default(now())
}
